<?php
/**
 * @package     Joomla.Site
 * @subpackage  com_tags
 *
 * @copyright   Copyright (C) 2005 - 2017 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE.txt
 */

defined('_JEXEC') or die;

$dispatcher = JEventDispatcher::getInstance();

//$this->category->text = $this->category->description;
$dispatcher->trigger('onContentPrepare', array($this->category->extension . '.categories', &$this->category, &$this->params, 0));
//$this->category->description = $this->category->text;

$results = $dispatcher->trigger('onContentAfterTitle', array($this->category->extension . '.categories', &$this->category, &$this->params, 0));
$afterDisplayTitle = trim(implode("\n", $results));

$results = $dispatcher->trigger('onContentBeforeDisplay', array($this->category->extension . '.categories', &$this->category, &$this->params, 0));
$beforeDisplayContent = trim(implode("\n", $results));

$results = $dispatcher->trigger('onContentAfterDisplay', array($this->category->extension . '.categories', &$this->category, &$this->params, 0));
$afterDisplayContent = trim(implode("\n", $results));

?>

<?php
$introcount = count($this->intro_items);
$counter = 0;


?>


<?php
$doc = JFactory::getDocument();

JHtml::_('jquery.framework');
JHtml::_('script', 'https://cdnjs.cloudflare.com/ajax/libs/jquery.isotope/3.0.4/isotope.pkgd.min.js', array('version' => 'auto', 'relative' => true), array('defer' => true, 'async' => false));
JHtml::_('script', 'https://imagesloaded.desandro.com/imagesloaded.pkgd.js', array('version' => 'auto', 'relative' => true), array('defer' => true, 'async' => false));

?>

<div class="button-group filters-button-group">
	<button class="btn btn-secondary is-checked" data-filter="*"><?php echo JText::_( 'CCC_FILTER_SHOW_ALL' );?></button>

	<?php
	$uniquetag = array();
	$uniquepath = array();
	$parenttags = array();

	/* get the paths */
	foreach ($this->intro_items as $item) {
		$tags = $item->tags->itemTags;
		foreach ($tags as $tag) {
			$uniquepath[$tag->id] = $tag->path;
		}
	}

	/* get the tags */
	foreach ($this->intro_items as $item) {
		$tags = $item->tags->itemTags;
		foreach ($tags as $tag) {
			$uniquetag[$tag->id] = $tag;
		}
	}

	/* get the uniquepaths and push their value into an array */

	foreach ($uniquepath as $id => $tagparent) {
		list($parents, $child) = explode("/", $tagparent);
		if (!in_array($parents, $parenttags, true)) {
			array_push($parenttags, $parents);
		}
	}

	/* show the parents as headlines */

	foreach ($parenttags as $parenttag)
	{
		echo '<h3 class="parent my-3">' . ucwords($parenttag) . '</h3>';
		foreach ($uniquetag as $id => $tag)
		{

			/* put the tags below their parents */
			$thistagpath = $tag->path;
			list($thistagparent, $child) = explode("/", $thistagpath);
			if ($parenttag == $thistagparent)
			{ ?>
				<button class="btn btn-secondary"
				        data-filter=".<?php echo $tag->alias; ?>">
					<?php echo $tag->title; ?>
				</button>
			<?php
			}
		}
	}

	?>

</div>


<div class="grid mt-5">
	<?php if ($this->params->get('show_page_heading')) : ?>
		<h1>
			<?php echo $this->escape($this->params->get('page_heading')); ?>
		</h1>
	<?php endif; ?>

	<?php if (!empty($this->intro_items)) : ?>

		<?php foreach ($this->intro_items as $key => &$item) :


			JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');

			$this->item = &$item;


			/*Shortcut for params*/
			$params = $this->item->params;

			/*check if the user is allowed to edit */
			$canEdit = $this->item->params->get('access-edit');

			/* check for the info / automatic position */

			$info = $params->get('info_block_position', 0);

			$images = json_decode($this->item->images);

			// Check if associations are implemented. If they are, define the parameter.
			$assocParam = (JLanguageAssociations::isEnabled() && $params->get('show_associations'));

			?>

			<?php echo $this->loadTemplate('items'); ?>

			<?php // Content is generated by content plugin event "onContentAfterDisplay"
			?>
			<?php echo $this->item->event->afterDisplayContent; ?>

			<!-- end item -->
			<?php $counter++; ?>

		<?php endforeach; ?>
	<?php endif; ?>

	<?php if (($this->params->def('show_pagination', 1) == 1 || ($this->params->get('show_pagination') == 2)) && ($this->pagination->get('pages.total') > 1)) : ?>
		<div class="pagination">
			<?php if ($this->params->def('show_pagination_results', 1)) : ?>
				<p class="counter pull-right"> <?php echo $this->pagination->getPagesCounter(); ?> </p>
			<?php endif; ?>
			<?php echo $this->pagination->getPagesLinks(); ?>
		</div>
	<?php endif; ?>
</div>


<script>
	jQuery(document).ready(function () {


		// init Isotope
		var $grid = jQuery('.grid').isotope({
			itemSelector: '.element-item',
			layoutMode: 'masonry'
		});

		jQuery('.grid').imagesLoaded().progress(function () {
			jQuery('.grid').isotope('layout');
		});

		// filter functions
		var filterFns = {
			// show if number is greater than 50
			numberGreaterThan50: function () {
				var number = $(this).find('.number').text();
				return parseInt(number, 10) > 50;
			},
			// show if name ends with -ium
			ium: function () {
				var name = $(this).find('.name').text();
				return name.match(/ium$/);
			}
		};

		// bind filter button click
		jQuery('.filters-button-group').on('click', 'button', function () {
			var filterValue = jQuery(this).attr('data-filter');
			// use filterFn if matches value
			filterValue = filterFns[filterValue] || filterValue;
			$grid.isotope({filter: filterValue});
		});
		// change is-checked class on buttons
		jQuery('.button-group').each(function (i, buttonGroup) {
			var $buttonGroup = jQuery(buttonGroup);
			$buttonGroup.on('click', 'button', function () {
				$buttonGroup.find('.is-checked').removeClass('is-checked');
				jQuery(this).addClass('is-checked');
			});
		});


	});

</script>